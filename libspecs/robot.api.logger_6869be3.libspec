<?xml version="1.0" encoding="UTF-8"?>
<keywordspec generated="20180822 10:14:41" type="library" name="robot.api.logger" format="ROBOT">
<version></version>
<scope>global</scope>
<namedargs>yes</namedargs>
<doc>Public logging API for test libraries.

This module provides a public API for writing messages to the log file
and the console. Test libraries can use this API like::

    logger.info('My message')

instead of logging through the standard output like::

    print '*INFO* My message'

In addition to a programmatic interface being cleaner to use, this API
has a benefit that the log messages have accurate timestamps.

If the logging methods are used when Robot Framework is not running,
the messages are redirected to the standard Python ``logging`` module
using logger named ``RobotFramework``. This feature was added in RF 2.8.7.

Log levels
----------

It is possible to log messages using levels ``TRACE``, ``DEBUG``, ``INFO``,
``WARN`` and ``ERROR`` either using the :func:`write` function or, more
commonly, with the log level specific :func:`trace`, :func:`debug`,
:func:`info`, :func:`warn`, :func:`error` functions. The support for the
error level and function is new in RF 2.9.

By default the trace and debug messages are not logged but that can be
changed with the ``--loglevel`` command line option. Warnings and errors are
automatically written also to the console and to the *Test Execution Errors*
section in the log file.

Logging HTML
------------

All methods that are used for writing messages to the log file have an
optional ``html`` argument. If a message to be logged is supposed to be
shown as HTML, this argument should be set to ``True``. Alternatively,
:func:`write` accepts a pseudo log level ``HTML``.

Example
-------

::

    from robot.api import logger

    def my_keyword(arg):
        logger.debug('Got argument %s.' % arg)
        do_something()
        logger.info('&lt;i&gt;This&lt;/i&gt; is a boring example.', html=True)</doc>
<kw name="Console">
<arguments>
<arg>msg</arg>
<arg>newline=True</arg>
<arg>stream=stdout</arg>
</arguments>
<doc>Writes the message to the console.

If the ``newline`` argument is ``True``, a newline character is
automatically added to the message.

By default the message is written to the standard output stream.
Using the standard error stream is possibly by giving the ``stream``
argument value ``'stderr'``. This is a new feature in RF 2.8.2.</doc>
<tags>
</tags>
</kw>
<kw name="Debug">
<arguments>
<arg>msg</arg>
<arg>html=False</arg>
</arguments>
<doc>Writes the message to the log file using the ``DEBUG`` level.</doc>
<tags>
</tags>
</kw>
<kw name="Error">
<arguments>
<arg>msg</arg>
<arg>html=False</arg>
</arguments>
<doc>Writes the message to the log file using the ``ERROR`` level.

New in Robot Framework 2.9.</doc>
<tags>
</tags>
</kw>
<kw name="Info">
<arguments>
<arg>msg</arg>
<arg>html=False</arg>
<arg>also_console=False</arg>
</arguments>
<doc>Writes the message to the log file using the ``INFO`` level.

If ``also_console`` argument is set to ``True``, the message is
written both to the log file and to the console.</doc>
<tags>
</tags>
</kw>
<kw name="Trace">
<arguments>
<arg>msg</arg>
<arg>html=False</arg>
</arguments>
<doc>Writes the message to the log file using the ``TRACE`` level.</doc>
<tags>
</tags>
</kw>
<kw name="Warn">
<arguments>
<arg>msg</arg>
<arg>html=False</arg>
</arguments>
<doc>Writes the message to the log file using the ``WARN`` level.</doc>
<tags>
</tags>
</kw>
<kw name="Write">
<arguments>
<arg>msg</arg>
<arg>level=INFO</arg>
<arg>html=False</arg>
</arguments>
<doc>Writes the message to the log file using the given level.

Valid log levels are ``TRACE``, ``DEBUG``, ``INFO`` (default since RF
2.9.1), ``WARN``, and ``ERROR`` (new in RF 2.9). Additionally it is
possible to use ``HTML`` pseudo log level that logs the message as HTML
using the ``INFO`` level.

Instead of using this method, it is generally better to use the level
specific methods such as ``info`` and ``debug`` that have separate
``html`` argument to control the message format.</doc>
<tags>
</tags>
</kw>
</keywordspec>
